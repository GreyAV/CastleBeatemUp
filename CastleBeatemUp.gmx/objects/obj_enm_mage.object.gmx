<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enm_mage_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_enm_text</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit parent create event
event_inherited();

// Generic AI variable settings
image_index = 0;
image_speed = 0.3;
plyr_dist = 0;      // Player distance
frame_counter = 0;

// Attack/Skills
unit_skilla_atkpow = 0;  // Basic attack power stat (Default = 100)
unit_skilla_cd = 0;      // Basic attack cooldown (In Seconds)
unit_skilla_sc = 0;      // Skill A stamina cost
unit_skilla_counter = 0; // Skill A counter for cd calc

// Unit statistics
unit_health = 100;        // Health of unit
unit_strength = 100;      // Calculating push and knockback
unit_defense = 100;       // Defense stat for damage mitigation
unit_agility = 1;       // Calculating movement speed
unit_spranim_speed = 0.2; // Sprite animation speed (used with agility)
unit_weight = 80;        // Weight stat for determining how to much to fly when hit
unit_stamina = 100;       // Stamina, limits skill casting

// Status indicators (Initialization not needed)
unit_atk_state = false; // For attacking skill use
unit_def_state = false; // For defensive skill use
unit_tgt_state = true;  // Used when after receiving damage (targetable)
unit_pushable = true;   // Used to determine if a pushable object

// Sprite assignment variables
// ...assignments go here...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y
plyr_dist = point_distance(x, y, obj_slayer.x, obj_slayer.y);
plyr_dir = point_direction(x, y, obj_slayer.x, obj_slayer.y);
image_speed = unit_spranim_speed;
if (unit_health &lt; 0) instance_destroy();
else if (unit_health &lt; 100) unit_health += (5/60);

// Attack animation
// ... Attack code block goes here...

// Player tracking
if (unit_tgt_state == true) {
    if ((plyr_dist &lt; 200) &amp;&amp; (plyr_dist &gt; 60)) {
        move_towards_point(obj_slayer.x, obj_slayer.y, unit_agility);
    }
    else if (plyr_dist &lt; 60) {
        //speed = 0;
        image_index = 1;
    }
    // Random movement
    else {
        frame_counter += 1;
        if (frame_counter &gt; 60) {
            speed = 0;
        }
        if (frame_counter &gt; 120) {
            direction = choose(0,90,180,270);
            speed = unit_agility;
            frame_counter = 0;
        }
    }
}
else {
    // Bounce
    if (!place_empty(x+lengthdir_x(speed, direction), y+lengthdir_y(speed, direction))) {
        if (!place_empty(x, y+lengthdir_y(speed, direction))) {
            vspeed = -vspeed;
        }
        else if (!place_empty(x+lengthdir_x(speed, direction), y)) {
            hspeed = -hspeed;
        }
        speed *= 0.8;
    }
    if (speed &gt; 0) {
        speed -= 0.1;
    }
    else {
        speed = 0;
        unit_tgt_state = true;
    }
}

// Collision tracking
if (!place_empty(x+lengthdir_x(speed, direction), y+lengthdir_y(speed, direction))) {
    speed = 0;
}

// Sprite direction
if ((direction &gt;= 45) &amp;&amp; (direction &lt; 135)) {
    sprite_index = spr_enm_mage_up;
}
if (((direction &gt;= 315) &amp;&amp; (direction &lt; 360)) || ((direction &gt;= 0) &amp;&amp; (direction &lt; 45))) {
    sprite_index = spr_enm_mage_right;
}
if ((direction &gt;= 135) &amp;&amp; (direction &lt; 225)) {
    sprite_index = spr_enm_mage_left;
}
if ((direction &gt;= 225) &amp;&amp; (direction &lt; 315)) {
    sprite_index = spr_enm_mage_down;
}
if (speed == 0) image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
