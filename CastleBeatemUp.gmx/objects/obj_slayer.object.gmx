<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slayer_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_text_player</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// *** Establish variable values for Slayer
event_inherited();
// Attack/Skills
unit_skilla_atkpow = 180;   // Basic attack power stat (Default = 100)
unit_skilla_cd = 0.5;       // Basic attack cooldown (In Seconds)
unit_skilla_sc = 10;        // Skill A stamina cost
unit_skilla_counter = 0;    // Skill A counter for cd calc
unit_skillb_atkpow = 200;   // Special ability power stat
unit_skillb_cd = 5;         // Special ability cooldown (In Seconds)
unit_skillb_sc = 50;        // Skill B stamina cost
unit_skillb_counter = 0;    // Skill B counter for cd calc
unit_skillc_cd = 1;         // Defensive ability cooldown (In Seconds)
unit_skillc_sc = 10;        // Skill C stamina cost
unit_skillc_counter = 0;    // Skill C counter for cd calc

// Player statistics
unit_health = 100;          // Health of unit
unit_strength = 120;        // Calculating push and knockback
unit_defense = 80;          // Defense stat for damage mitigation
unit_agility = 1.3;         // Calculating movement speed
unit_spranim_speed = unit_agility / 11; // Sprite animation speed (used with agility)
unit_weight = 110;          // Weight stat for determining how to much to fly when hit
unit_stamina = 100;         // Stamina, limits skill casting
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Consistant variable checks
depth = -y;
if (unit_health &lt; 100) unit_health += (1/unit_fps);
if (unit_stamina &lt; 100) unit_stamina += (10/unit_fps);
if (unit_skilla_counter &gt; 0) unit_skilla_counter -= 1;

// *** Attacking Section ***
if ((keyboard_check_pressed(vk_left) &amp;&amp; (unit_stamina &gt; unit_skilla_sc)) &amp;&amp; (unit_atk_state == false) &amp;&amp;
(unit_tgt_state == true) &amp;&amp; (unit_skilla_counter &lt;= 0)) {
    unit_atk_state = true;
    speed = 0;
    if (sprite_index == spr_slayer_up) sprite_index = spr_slayer_atk_up;
    else if (sprite_index == spr_slayer_right) sprite_index = spr_slayer_atk_right;
    else if (sprite_index == spr_slayer_left) sprite_index = spr_slayer_atk_left;
    else if (sprite_index == spr_slayer_down) sprite_index = spr_slayer_atk_down;
    image_index = 0;
    image_speed = 0.1;
}
else if ((unit_atk_state == true) &amp;&amp; (unit_tgt_state == true)) {
    if ((image_index &gt;= 1) &amp;&amp; (image_index &lt; 1.1)) {
        if (sprite_index == spr_slayer_atk_up) {
            unit_inst = collision_rectangle(x-10,y-30,x+10,y,obj_parent_unit,false,true);
        }
        else if (sprite_index == spr_slayer_atk_right) {
            unit_inst = collision_rectangle(x,y-10,x+30,y+10,obj_parent_unit,false,true);
        }
        else if (sprite_index == spr_slayer_atk_left) {
            unit_inst = collision_rectangle(x-30,y-10,x,y+10,obj_parent_unit,false,true);
        }
        else if (sprite_index == spr_slayer_atk_down) {
            unit_inst = collision_rectangle(x-10,y,x+10,y+30,obj_parent_unit,false,true);
        }
        if (unit_inst != noone) {
            with (unit_inst) {
                if (self.unit_tgt_state == true) {
                    self.unit_health = self.unit_health - ((20 * other.unit_skilla_atkpow) / self.unit_defense);
                    self.unit_tgt_state = false;
                    self.direction = point_direction(other.x, other.y, self.x, self.y);
                    self.speed = (other.unit_strength + other.unit_skilla_atkpow) / (self.unit_weight / 1.5);
                }
            }
        }
    }
    if (image_index &gt;= (image_number - 1)) {
        unit_atk_state = false;
        unit_stamina -= unit_skilla_sc;
        unit_skilla_counter = (unit_skilla_cd * unit_fps)
        if (sprite_index == spr_slayer_atk_up) sprite_index = spr_slayer_up;
        else if (sprite_index == spr_slayer_atk_right) sprite_index = spr_slayer_right;
        else if (sprite_index == spr_slayer_atk_left) sprite_index = spr_slayer_left;
        else if (sprite_index == spr_slayer_atk_down) sprite_index = spr_slayer_down;
        image_speed = unit_spranim_speed;
    }
}

// *** Moving Section ***
// * Moving in the Upward direction *
if (keyboard_check(ord("W")) &amp;&amp; (unit_atk_state == false) &amp;&amp; (unit_tgt_state == true)) {
    // Moving just up
    if (!(keyboard_check(ord("A")) || keyboard_check(ord("D")))) {
        // Up and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_n), y+lengthdir_y(unit_agility, dir_n))) {
            direction = dir_n;
            speed = unit_agility;
            sprite_index = spr_slayer_up;
            image_speed = unit_spranim_speed;
        }
        // Up with collision
        else {
            direction = dir_n;
            speed = 0;
            unit_inst = collision_point(x, y-12,obj_parent_unit,false,true);
            //show_debug_message(string(unit_inst));
            if (unit_inst != noone) {
                with (unit_inst) {
                    if (self.unit_pushable == true) {
                        self.direction = 90;
                        if (other.unit_strength &gt; self.unit_weight) {
                            self.speed = other.unit_agility;
                        }
                        else {
                            self.speed = (other.unit_strength / self.unit_weight) * other.unit_agility;
                            other.speed = self.speed;
                        }
                        if (!(place_empty(self.x+lengthdir_x(self.speed, 90), self.y+lengthdir_y(self.speed, 90)))) {
                            self.speed = 0;
                            other.speed = 0;
                        }
                    }
                }
                sprite_index = spr_slayer_up;
                image_speed = unit_spranim_speed;
            }
            else {
                sprite_index = spr_slayer_up;
                image_speed = unit_spranim_speed;
            }
        }
    }
    // Moving up and to the right
    else if (keyboard_check(ord("D")) &amp;&amp; (sprite_index == spr_slayer_up)) {
        // Up/Right and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_ne), y+lengthdir_y(unit_agility, dir_ne))) {
            direction = dir_ne;
            speed = unit_agility;
        }
        // Up/Right with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_n), y+lengthdir_y(unit_agility, dir_n))) {
                direction = dir_n;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_e), y+lengthdir_y(unit_agility, dir_e))) {
                direction = dir_e;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
    // Moving up and to the left
    else if (keyboard_check(ord("A")) &amp;&amp; (sprite_index == spr_slayer_up)) {
        // Up/Left and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_nw), y+lengthdir_y(unit_agility, dir_nw))) {
            direction = dir_nw;
            speed = unit_agility;
        }
        // Up/Left with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_n), y+lengthdir_y(unit_agility, dir_n))) {
                direction = dir_n;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_w), y+lengthdir_y(unit_agility, dir_w))) {
                direction = dir_w;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
}

// * Moving in the Rightward direction *
if (keyboard_check(ord("D")) &amp;&amp; (unit_atk_state == false) &amp;&amp; (unit_tgt_state == true)) {
    // Moving just right
    if (!(keyboard_check(ord("W")) || keyboard_check(ord("S")))) {
        // Right and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_e), y+lengthdir_y(unit_agility, dir_e))) {
            direction = dir_e;
            speed = unit_agility;
            sprite_index = spr_slayer_right;
            image_speed = unit_spranim_speed;
        }
        // Right with collision
        else {
            direction = dir_e;
            speed = 0;
            unit_inst = collision_point(x+20, y,obj_parent_unit,false,true);
            //show_debug_message(string(unit_inst));
            if (unit_inst != noone) {
                with (unit_inst) {
                    if (self.unit_pushable == true) {
                        self.direction = 0;
                        if (other.unit_strength &gt; self.unit_weight) {
                            self.speed = other.unit_agility;
                        }
                        else {
                            self.speed = (other.unit_strength / self.unit_weight) * other.unit_agility;
                            other.speed = self.speed;
                        }
                        if (!(place_empty(self.x+lengthdir_x(self.speed, 0), self.y+lengthdir_y(self.speed, 0)))) {
                            self.speed = 0;
                            other.speed = 0;
                        }
                    }
                }
                sprite_index = spr_slayer_right;
                image_speed = unit_spranim_speed;
            }
            else {
                sprite_index = spr_slayer_right;
                image_speed = unit_spranim_speed;
            }
        }
    }
    // Moving right and up
    else if (keyboard_check(ord("W")) &amp;&amp; (sprite_index == spr_slayer_right)) {
        // Right/Up and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_ne), y+lengthdir_y(unit_agility, dir_ne))) {
            direction = dir_ne;
            speed = unit_agility;
        }
        // Right/Up with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_e), y+lengthdir_y(unit_agility, dir_e))) {
                direction = dir_e;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_n), y+lengthdir_y(unit_agility, dir_n))) {
                direction = dir_n;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
    // Moving right and down
    else if (keyboard_check(ord("S")) &amp;&amp; (sprite_index == spr_slayer_right)) {
        // Right/Down and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_se), y+lengthdir_y(unit_agility, dir_se))) {
            direction = dir_se;
            speed = unit_agility;
        }
        // Right/Down with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_e), y+lengthdir_y(unit_agility, dir_e))) {
                direction = dir_e;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_s), y+lengthdir_y(unit_agility, dir_s))) {
                direction = dir_s;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
}

// * Moving in the Leftward direction *
if (keyboard_check(ord("A")) &amp;&amp; (unit_atk_state == false) &amp;&amp; (unit_tgt_state == true)) {
    // Moving just Left
    if (!(keyboard_check(ord("W")) || keyboard_check(ord("S")))) {
        // Left and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_w), y+lengthdir_y(unit_agility, dir_w))) {
            direction = dir_w;
            speed = unit_agility;
            sprite_index = spr_slayer_left;
            image_speed = unit_spranim_speed;
        }
        // Left with collision
        else {
            direction = dir_w;
            speed = 0;
            unit_inst = collision_point(x-20, y,obj_parent_unit,false,true);
            //show_debug_message(string(unit_inst));
            if (unit_inst != noone) {
                with (unit_inst) {
                    if (self.unit_pushable == true) {
                        self.direction = 180;
                        if (other.unit_strength &gt; self.unit_weight) {
                            self.speed = other.unit_agility;
                        }
                        else {
                            self.speed = (other.unit_strength / self.unit_weight) * other.unit_agility;
                            other.speed = self.speed;
                        }
                        if (!(place_empty(self.x+lengthdir_x(self.speed, 180), self.y+lengthdir_y(self.speed, 180)))) {
                            self.speed = 0;
                            other.speed = 0;
                        }
                    }
                }
                sprite_index = spr_slayer_left;
                image_speed = unit_spranim_speed;
            }
            else {
                sprite_index = spr_slayer_left;
                image_speed = unit_spranim_speed;
            }
        }
    }
    // Moving Left and Up
    else if (keyboard_check(ord("W")) &amp;&amp; (sprite_index == spr_slayer_left)) {
        // Left/Up and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_nw), y+lengthdir_y(unit_agility, dir_nw))) {
            direction = dir_nw;
            speed = unit_agility;
        }
        // Left/Up with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_w), y+lengthdir_y(unit_agility, dir_w))) {
                direction = dir_w;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_n), y+lengthdir_y(unit_agility, dir_n))) {
                direction = dir_n;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
    // Moving Left and Down
    else if (keyboard_check(ord("S")) &amp;&amp; (sprite_index == spr_slayer_left)) {
        // Left/Down and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_sw), y+lengthdir_y(unit_agility, dir_sw))) {
            direction = dir_sw;
            speed = unit_agility;
        }
        // Left/Down with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_w), y+lengthdir_y(unit_agility, dir_w))) {
                direction = dir_w;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_s), y+lengthdir_y(unit_agility, dir_s))) {
                direction = dir_s;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
}

// * Moving in the Downward direction *
if (keyboard_check(ord("S")) &amp;&amp; (unit_atk_state == false) &amp;&amp; (unit_tgt_state == true)) {
    // Moving just Down
    if (!(keyboard_check(ord("A")) || keyboard_check(ord("D")))) {
        // Down and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_s), y+lengthdir_y(unit_agility, dir_s))) {
            direction = dir_s;
            speed = unit_agility;
            sprite_index = spr_slayer_down;
            image_speed = unit_spranim_speed;
        }
        // Down with collision
        else {
            direction = dir_s;
            speed = 0;
            unit_inst = collision_point(x, y+12,obj_parent_unit,false,true);
            //show_debug_message(string(unit_inst));
            if (unit_inst != noone) {
                with (unit_inst) {
                    if (self.unit_pushable == true) {
                        self.direction = 270;
                        if (other.unit_strength &gt; self.unit_weight) {
                            self.speed = other.unit_agility;
                        }
                        else {
                            self.speed = (other.unit_strength / self.unit_weight) * other.unit_agility;
                            other.speed = self.speed;
                        }
                        if (!(place_empty(self.x+lengthdir_x(self.speed, 270), self.y+lengthdir_y(self.speed, 270)))) {
                            self.speed = 0;
                            other.speed = 0;
                        }
                    }
                }
                sprite_index = spr_slayer_down;
                image_speed = unit_spranim_speed;
            }
            else {
                sprite_index = spr_slayer_down;
                image_speed = unit_spranim_speed;
            }
        }
    }
    // Moving Down and to the right
    else if (keyboard_check(ord("D")) &amp;&amp; (sprite_index == spr_slayer_down)) {
        // Down/Right and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_se), y+lengthdir_y(unit_agility, dir_se))) {
            direction = dir_se;
            speed = unit_agility;
        }
        // Down/Right with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_s), y+lengthdir_y(unit_agility, dir_s))) {
                direction = dir_s;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_e), y+lengthdir_y(unit_agility, dir_e))) {
                direction = dir_e;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
    // Moving Down and to the left
    else if (keyboard_check(ord("A")) &amp;&amp; (sprite_index == spr_slayer_down)) {
        // Down/Left and no collision
        if (place_empty(x+lengthdir_x(unit_agility, dir_sw), y+lengthdir_y(unit_agility, dir_sw))) {
            direction = dir_sw;
            speed = unit_agility;
        }
        // Down/Left with collision
        else {
            if (place_empty(x+lengthdir_x(unit_agility, dir_s), y+lengthdir_y(unit_agility, dir_s))) {
                direction = dir_s;
                speed = unit_agility;
            }
            else if (place_empty(x+lengthdir_x(unit_agility, dir_w), y+lengthdir_y(unit_agility, dir_w))) {
                direction = dir_w;
                speed = unit_agility;
            }
            else speed = 0;
        }
    }
}

// Struck while defending
if ((unit_def_state == true) &amp;&amp; (unit_tgt_state == false)) {
    unit_atk_state = false;
    // Keep sprite the same
    // Check for collisions
        // If collide
            // bounce off algorigthm
            // push colliding object with momentum algorithm
    if (speed &gt; 0) speed -= 0.1;
    // Keep facing same direction as when before struck
}

// Struck while not defending
if ((unit_def_state == false) &amp;&amp; (unit_tgt_state == false)) {
    unit_atk_state = false;
    // Check for collisions
        // If collide
            // bounce off algorigthm
            // push colliding object with momentum algorithm
    if (speed &gt; 0) speed -= 0.1;
    // spinning animation
}

// Idle
if ((unit_atk_state == false) &amp;&amp; (unit_tgt_state == true) &amp;&amp; !keyboard_check(vk_anykey)) {
    speed = 0;
    image_index = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
